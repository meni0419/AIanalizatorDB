# !/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from flask_session import Session
from werkzeug.middleware.proxy_fix import ProxyFix
import os
from werkzeug.utils import secure_filename
from werkzeug.security import check_password_hash, generate_password_hash
import json
import time
import markdown
from pathlib import Path
import threading
import queue
import uuid
from contextlib import contextmanager

from config import Config
from deepseek_helpers import DeepSeekChatPersistent
from database import ChatDatabase, UserDatabase

app = Flask(__name__)
app.config.from_object(Config)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ –ø—Ä–æ–∫—Å–∏
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)

Session(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
# chat_instance = None
# chat_lock = threading.Lock()
# –í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ - —Å–ª–æ–≤–∞—Ä—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_chat_instances = {}
chat_lock = threading.Lock()
db = ChatDatabase()
user_db = UserDatabase()
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async_operations = {}
operation_lock = threading.Lock()


class AsyncOperation:
    def __init__(self, operation_id):
        self.operation_id = operation_id
        self.status = "pending"  # pending, running, completed, error
        self.progress = ""
        self.result = None
        self.error = None
        self.start_time = time.time()


def get_chat_instance():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_chat_instances

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
    try:
        user_id = session.get('user_id')
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        global chat_instance
        with chat_lock:
            if chat_instance is None:
                chat_instance = DeepSeekChatPersistent(
                    model_name=app.config['DEEPSEEK_MODEL'],
                    max_context_tokens=app.config['MAX_CONTEXT_TOKENS']
                )
            return chat_instance

    if not user_id:
        raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    with chat_lock:
        if user_id not in user_chat_instances:
            user_chat_instances[user_id] = DeepSeekChatPersistent(
                model_name=app.config['DEEPSEEK_MODEL'],
                max_context_tokens=app.config['MAX_CONTEXT_TOKENS']
            )
        return user_chat_instances[user_id]


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def cleanup_inactive_users():
    """–û—á–∏—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —á–∞—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        with chat_lock:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
            pass


cleanup_thread = threading.Thread(target=cleanup_inactive_users)
cleanup_thread.daemon = True
cleanup_thread.start()


def get_session_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏"""
    if 'session_id' not in session or not session['session_id']:
        session_id = user_db.create_session(session['user_id'])
        session['session_id'] = session_id
    return session['session_id']


def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']


def read_file_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except UnicodeDecodeError:
        for encoding in ['cp1251', 'latin1']:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    return f.read()
            except:
                continue
        return "[–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª - –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]"
    except Exception as e:
        return f"[–û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}]"


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç –∏–ª–∏ –ª–æ–≥–∏–Ω"""
    if 'logged_in' in session and session['logged_in']:
        return redirect(url_for('chat'))
    return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '').strip()

        if not username or not password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
            return render_template('login.html')

        user_id = user_db.verify_user(username, password)
        if user_id:
            session['user_id'] = user_id
            session['username'] = username
            session['logged_in'] = True

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
            session_id = user_db.create_session(user_id)
            session['session_id'] = session_id

            flash('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'success')
            return redirect(url_for('chat'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('login.html')


@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.clear()
    return redirect(url_for('login'))


@app.route('/chat')
def chat():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    if 'logged_in' not in session or not session['logged_in']:
        return redirect(url_for('login'))

    chat_inst = get_chat_instance()
    model_loaded = chat_inst.model_loaded

    return render_template('chat.html',
                           username=session['username'],
                           model_loaded=model_loaded,
                           model_name=app.config['DEEPSEEK_MODEL'])


@app.route('/get_history', methods=['GET'])
def get_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        session_id = get_session_id()
        messages = db.get_messages(session_id)
        return jsonify({
            'success': True,
            'messages': messages
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}'}), 500


@app.route('/preload_model', methods=['POST'])
def preload_model():
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        chat_inst = get_chat_instance()

        if chat_inst.model_loaded:
            return jsonify({
                'success': True,
                'message': '–ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å'
            })

        print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
        print("‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ CPU...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç–æ–≤
        start_time = time.time()
        success = chat_inst.preload_model()
        load_time = time.time() - start_time

        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.2f} —Å–µ–∫—É–Ω–¥ ({load_time / 60:.2f} –º–∏–Ω—É—Ç)")

        if success:
            return jsonify({
                'success': True,
                'message': f'–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥',
                'load_time': round(load_time, 2)
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'
            }), 500

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        import traceback
        traceback.print_exc()

        return jsonify({
            'success': False,
            'error': error_msg
        }), 500


@app.route('/send_message', methods=['POST'])
def send_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ form
        if request.content_type and 'multipart/form-data' in request.content_type:
            message = request.form.get('message', '').strip()
            session_id = request.form.get('session_id', '')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            files_content = []
            uploaded_files = request.files.getlist('files')

            for file in uploaded_files:
                if file and file.filename:
                    if allowed_file(file.filename):
                        try:
                            content = file.read().decode('utf-8')
                            files_content.append({
                                'name': file.filename,
                                'content': content
                            })
                        except UnicodeDecodeError:
                            file.seek(0)
                            try:
                                content = file.read().decode('cp1251')
                                files_content.append({
                                    'name': file.filename,
                                    'content': content
                                })
                            except:
                                files_content.append({
                                    'name': file.filename,
                                    'content': f'[–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª - –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]'
                                })
                    else:
                        return jsonify({'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}'}), 400
        else:
            data = request.get_json()
            message = data.get('message', '').strip()
            session_id = data.get('session_id', '')
            files_content = data.get('files', [])

        if not message:
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400

        chat_inst = get_chat_instance()

        if session_id:
            session['session_id'] = session_id
        else:
            session_id = get_session_id()

        if not chat_inst.model_loaded:
            return jsonify({'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"'}), 400

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        original_message = message

        if files_content:
            file_texts = []
            for file_data in files_content:
                filename = file_data.get('name', 'unknown')
                content = file_data.get('content', '')

                if len(content) > 200000:
                    content = content[:200000] + "\n\n[... —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ...]"

                file_text = f"[–§–∞–π–ª: {filename}]\n"
                file_text += f"[–†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤]\n"
                file_text += "--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê ---\n"
                file_text += content
                file_text += "\n--- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---\n\n"
                file_texts.append(file_text)

            message = ''.join(file_texts) + message

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.save_message(session_id, 'user', original_message, files=files_content, user_id=session.get('user_id'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç–æ–≤
        start_time = time.time()

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–ª—è CPU)...")

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
        response = chat_inst.send_message(message)

        if isinstance(response, dict) and 'error' in response:
            return jsonify({'error': response['error']}), 500

        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response[:100]}...")

        response_time = time.time() - start_time

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        messages_count = len(db.get_messages(session_id))
        if messages_count == 1:
            title = original_message[:50] + ('...' if len(original_message) > 50 else '')
            user_db.update_session_title(session_id, title)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        thinking_text = ""
        final_response = response

        if "<think>" in response and "</think>" in response:
            import re
            thinking_match = re.search(r'<think>(.*?)</think>', response, re.DOTALL)
            if thinking_match:
                thinking_text = thinking_match.group(1).strip()
                final_response = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL).strip()

        if not final_response.strip():
            final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        db.save_message(session_id, 'assistant', final_response, thinking_text, response_time,
                        files=None, user_id=session.get('user_id'))

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'success': True,
            'thinking': thinking_text,
            'response': final_response,
            'response_time': round(response_time, 2),
            'session_id': session_id
        }

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
        try:
            html_response = markdown.markdown(final_response, extensions=['codehilite', 'fenced_code', 'tables'])
            response_data['html_response'] = html_response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ markdown: {str(e)}")
            response_data['html_response'] = final_response

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä: {len(final_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response_time:.2f} —Å–µ–∫—É–Ω–¥ ({response_time / 60:.2f} –º–∏–Ω—É—Ç)")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        response = jsonify(response_data)
        response.headers['Content-Type'] = 'application/json; charset=utf-8'
        return response

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_message: {str(e)}")
        import traceback
        traceback.print_exc()

        error_response = jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}'})
        error_response.headers['Content-Type'] = 'application/json; charset=utf-8'
        return error_response, 500


@app.route('/upload_file', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            upload_folder = app.config['UPLOAD_FOLDER']
            os.makedirs(upload_folder, exist_ok=True)

            file_path = os.path.join(upload_folder, filename)
            file.save(file_path)

            content = read_file_content(file_path)
            os.remove(file_path)

            return jsonify({
                'success': True,
                'filename': filename,
                'content': content,
                'size': len(content)
            })
        else:
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'}), 400

    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500


@app.route('/clear_history', methods=['POST'])
def clear_history():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        chat_inst = get_chat_instance()
        session_id = get_session_id()

        chat_inst.clear_history()
        db.clear_session(session_id)

        return jsonify({'success': True, 'message': '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞'})

    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}'}), 500


@app.route('/get_status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        chat_inst = get_chat_instance()
        session_id = get_session_id()

        current_tokens = chat_inst.get_context_size()
        used_percent = (current_tokens / chat_inst.max_context_tokens) * 100

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        stats = db.get_session_stats(session_id)

        return jsonify({
            'success': True,
            'model_loaded': chat_inst.model_loaded,
            'model_name': chat_inst.model_name,
            'current_tokens': current_tokens,
            'max_tokens': chat_inst.max_context_tokens,
            'used_percent': round(used_percent, 1),
            'messages_count': len(chat_inst.conversation_history),
            'db_stats': stats
        })

    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500


@app.route('/get_sessions')
def get_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not session.get('logged_in'):
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})

    try:
        user_id = session['user_id']
        sessions = user_db.get_user_sessions(user_id)

        return jsonify({'success': True, 'sessions': sessions})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/load_session/<session_id>')
def load_session(session_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if not session.get('logged_in'):
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})

    try:
        session['session_id'] = session_id
        messages = db.get_messages(session_id)

        # –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –º–æ–¥–µ–ª–∏
        chat_inst = get_chat_instance()
        chat_inst.clear_history()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–æ–¥–µ–ª—å
        for msg in messages:
            if msg['role'] in ['user', 'assistant']:
                chat_inst.conversation_history.append({
                    "role": msg['role'],
                    "content": msg['content']
                })

        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(chat_inst.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        return jsonify({'success': True, 'messages': messages})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/new_chat', methods=['POST'])
def new_chat():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    if not session.get('logged_in'):
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})

    try:
        user_id = session['user_id']
        session_id = user_db.create_session(user_id)
        session['session_id'] = session_id

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        chat_inst = get_chat_instance()
        chat_inst.clear_history()

        print("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç, –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")

        return jsonify({'success': True, 'session_id': session_id})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/send_message_async', methods=['POST'])
def send_message_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    operation_id = str(uuid.uuid4())
    operation = AsyncOperation(operation_id)

    with operation_lock:
        async_operations[operation_id] = operation

    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –î–û –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞
    user_id = session.get('user_id')
    current_session_id = session.get('session_id', '')

    # –ü–æ–ª—É—á–∞–µ–º chat_instance –¢–£–¢, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
    try:
        chat_inst = get_chat_instance()
    except Exception as e:
        operation.status = "error"
        operation.error = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}"
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}'}), 500

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    try:
        if request.content_type and 'multipart/form-data' in request.content_type:
            message = request.form.get('message', '').strip()
            session_id = request.form.get('session_id', '')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            files_content = []
            uploaded_files = request.files.getlist('files')

            for file in uploaded_files:
                if file and file.filename:
                    if allowed_file(file.filename):
                        try:
                            content = file.read().decode('utf-8')
                            files_content.append({
                                'name': file.filename,
                                'content': content
                            })
                        except:
                            files_content.append({
                                'name': file.filename,
                                'content': f'[–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª]'
                            })
        else:
            data = request.get_json()
            message = data.get('message', '').strip()
            session_id = data.get('session_id', '')
            files_content = data.get('files', [])

        if not message:
            operation.status = "error"
            operation.error = "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400

    except Exception as e:
        operation.status = "error"
        operation.error = str(e)
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}'}), 400

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π session_id
    if session_id:
        final_session_id = session_id
    else:
        if not current_session_id:
            final_session_id = user_db.create_session(user_id)
        else:
            final_session_id = current_session_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def process_message():
        try:
            operation.status = "running"
            operation.progress = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."

            # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú session –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if not chat_inst.model_loaded:
                operation.status = "error"
                operation.error = "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'"
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            original_message = message
            processed_message = message

            if files_content:
                operation.progress = "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."
                file_texts = []
                for file_data in files_content:
                    filename = file_data.get('name', 'unknown')
                    content = file_data.get('content', '')

                    if len(content) > 200000:
                        content = content[:200000] + "\n\n[... —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω ...]"

                    file_text = f"[–§–∞–π–ª: {filename}]\n--- –°–û–î–ï–†–ñ–ò–ú–û–ï ---\n{content}\n--- –ö–û–ù–ï–¶ ---\n\n"
                    file_texts.append(file_text)

                processed_message = ''.join(file_texts) + message

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.save_message(final_session_id, 'user', original_message, files=files_content, user_id=user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI
            operation.progress = "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI..."
            start_time = time.time()

            response = chat_inst.send_message(processed_message)

            if isinstance(response, dict) and 'error' in response:
                operation.status = "error"
                operation.error = response['error']
                return

            response_time = time.time() - start_time

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            messages_count = len(db.get_messages(final_session_id))
            if messages_count == 1:
                title = original_message[:50] + ('...' if len(original_message) > 50 else '')
                user_db.update_session_title(final_session_id, title)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            thinking_text = ""
            final_response = response

            if "<think>" in response and "</think>" in response:
                import re
                thinking_match = re.search(r'<think>(.*?)</think>', response, re.DOTALL)
                if thinking_match:
                    thinking_text = thinking_match.group(1).strip()
                    final_response = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL).strip()

            if not final_response.strip():
                final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            db.save_message(final_session_id, 'assistant', final_response, thinking_text, response_time,
                            files=None, user_id=user_id)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation.result = {
                'success': True,
                'thinking': thinking_text,
                'response': final_response,
                'response_time': round(response_time, 2),
                'session_id': final_session_id
                # –ù–ï –≤–∫–ª—é—á–∞–µ–º 'user_message' - –æ–Ω–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ UI
            }

            operation.status = "completed"
            operation.progress = "–ì–æ—Ç–æ–≤–æ"

        except Exception as e:
            operation.status = "error"
            operation.error = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
            import traceback
            traceback.print_exc()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
    thread = threading.Thread(target=process_message)
    thread.daemon = True
    thread.start()

    return jsonify({
        'success': True,
        'operation_id': operation_id,
        'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'
    })


@app.route('/operation_status/<operation_id>', methods=['GET'])
def operation_status(operation_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    with operation_lock:
        operation = async_operations.get(operation_id)

        if not operation:
            return jsonify({'error': '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

        elapsed_time = time.time() - operation.start_time

        response = {
            'operation_id': operation_id,
            'status': operation.status,
            'progress': operation.progress,
            'elapsed_time': round(elapsed_time, 2)
        }

        if operation.status == "completed":
            response['result'] = operation.result
        elif operation.status == "error":
            response['error'] = operation.error

        return jsonify(response)


@app.route('/delete_session/<session_id>', methods=['DELETE'])
def delete_session(session_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if not session.get('logged_in'):
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = session.get('user_id')
        sessions = user_db.get_user_sessions(user_id)

        # –ù–∞–π–¥–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
        session_exists = any(s['session_id'] == session_id for s in sessions)

        if not session_exists:
            return jsonify({'success': False, 'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º'}), 404

        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_db.delete_session(session_id)

        # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
        if session.get('session_id') == session_id:
            session.pop('session_id', None)
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
            chat_inst = get_chat_instance()
            chat_inst.clear_history()
            print("üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≤ –ø–∞–º—è—Ç–∏")

        return jsonify({'success': True, 'message': '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id}: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}'}), 500


if __name__ == '__main__':
    app.run(
        debug=app.config['DEBUG'],
        host=app.config['SERVER_HOST'],
        port=app.config['SERVER_PORT'],
        threaded=True
    )
