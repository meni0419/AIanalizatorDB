#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import ollama
import os
import re
import sys
import time
from pathlib import Path


class DeepSeekChatPersistent:
    def __init__(self, model_name="deepseek-r1:8b", max_context_tokens=128000):
        self.model_name = model_name
        self.client = ollama.Client()
        self.conversation_history = []
        self.max_context_tokens = max_context_tokens
        self.model_loaded = False

    def preload_model(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å"""
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å {self.model_name} –≤ –ø–∞–º—è—Ç—å...")
        print("‚è±Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π...")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            start_time = time.time()

            response = self.client.chat(
                model=self.model_name,
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'"}],
                options={
                    "temperature": 0.1,
                    "num_ctx": 131072,
                    "keep_alive": "72h",  # –î–µ—Ä–∂–∞—Ç—å –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç–∏ 24 —á–∞—Å–∞
                }
            )

            load_time = time.time() - start_time
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response['message']['content']}")

            self.model_loaded = True
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            return False

    def estimate_tokens(self, text):
        """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        return len(text) // 4

    def get_context_size(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö"""
        total_tokens = 0
        for msg in self.conversation_history:
            total_tokens += self.estimate_tokens(msg["content"])
        return total_tokens

    def manage_context(self):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        current_tokens = self.get_context_size()
        max_history_tokens = int(self.max_context_tokens * 0.8)

        if current_tokens > max_history_tokens:
            print(f"‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ({current_tokens} —Ç–æ–∫–µ–Ω–æ–≤). –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

            while len(self.conversation_history) > 2 and self.get_context_size() > max_history_tokens:
                self.conversation_history.pop(0)
                self.conversation_history.pop(0)

            print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∂–∞—Ç –¥–æ {self.get_context_size()} —Ç–æ–∫–µ–Ω–æ–≤")

        return current_tokens

    def load_file_content(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
        try:
            path = Path(file_path)
            if not path.exists():
                return f"[–û–®–ò–ë–ö–ê: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω]"

            if not path.is_file():
                return f"[–û–®–ò–ë–ö–ê: '{file_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º]"

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π - –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            max_file_size = 5 * 1024 * 1024  # 5MB –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π
            if path.stat().st_size > max_file_size:
                return f"[–û–®–ò–ë–ö–ê: –§–∞–π–ª '{file_path}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{max_file_size // 1024 // 1024}MB)]"

            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()

            content_tokens = self.estimate_tokens(content)
            if content_tokens > self.max_context_tokens * 0.6:  # 60% –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                return f"[–û–®–ò–ë–ö–ê: –§–∞–π–ª '{file_path}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({content_tokens} —Ç–æ–∫–µ–Ω–æ–≤)]"

            file_info = f"[–§–∞–π–ª: {file_path}]\n"
            file_info += f"[–†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, ~{content_tokens} —Ç–æ–∫–µ–Ω–æ–≤]\n"
            file_info += "--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê ---\n"
            file_info += content
            file_info += "\n--- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---"

            return file_info

        except UnicodeDecodeError:
            return f"[–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª '{file_path}' - –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]"
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{file_path}': {str(e)}]"

    def process_file_references(self, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        pattern = r'#file:([^\s]+)'

        def replace_file_ref(match):
            file_path = match.group(1)
            return self.load_file_content(file_path)

        processed_text = re.sub(pattern, replace_file_ref, text)
        return processed_text

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DeepSeek"""
        if not self.model_loaded:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /preload")
            return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å"

        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            if "#file:" in message:
                processed_message = self.process_file_references(message)
            else:
                processed_message = message

            self.conversation_history.append({
                "role": "user",
                "content": processed_message
            })

            self.manage_context()

            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            start_time = time.time()

            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å...")

            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è ollama - –ø—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
            response = self.client.chat(
                model=self.model_name,
                messages=self.conversation_history,
                options={
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "num_ctx": 131072,
                    "keep_alive": "72h",  # –î–µ—Ä–∂–∏–º –º–æ–¥–µ–ª—å –¥–æ–ª—å—à–µ
                }
            )

            response_time = time.time() - start_time

            assistant_response = response['message']['content']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.conversation_history.append({
                "role": "assistant",
                "content": assistant_response
            })

            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥ ({response_time / 60:.2f} –º–∏–Ω—É—Ç)")
            print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(assistant_response)} —Å–∏–º–≤–æ–ª–æ–≤")

            return assistant_response

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return error_msg

    def unload_model(self):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏ """
        try:
            print("üîÑ –í—ã–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏...")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep_alive –≤ 0 –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏
            self.client.chat(
                model=self.model_name,
                messages=[{"role": "user", "content": "bye"}],
                options={"keep_alive": 0}
            )

            self.model_loaded = False
            print("‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history = []
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {self.max_context_tokens}")

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –º–æ–¥–µ–ª–∏"""
        current_tokens = self.get_context_size()
        used_percent = (current_tokens / self.max_context_tokens) * 100

        print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  –ú–æ–¥–µ–ª—å: {self.model_name}")
        print(f"  –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {'üü¢ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å' if self.model_loaded else 'üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {current_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤ ({used_percent:.1f}%)")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {self.max_context_tokens - current_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"  –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.conversation_history)}")

        if used_percent > 80:
            print("  ‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω!")
        elif used_percent > 60:
            print("  ‚ö° –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            print("  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ –Ω–æ—Ä–º–µ")

    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.conversation_history:
            print("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—É—Å—Ç–∞")
            return

        print("\n--- –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê ---")
        for i, msg in enumerate(self.conversation_history, 1):
            role = "üë§ –í—ã" if msg["role"] == "user" else "ü§ñ AI"
            content = msg["content"]
            tokens = self.estimate_tokens(content)

            if len(content) > 200:
                content = content[:200] + "..."

            print(f"{i}. {role} (~{tokens} —Ç–æ–∫–µ–Ω–æ–≤): {content}")
        print("--- –ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò ---\n")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
        print("üöÄ DeepSeek-R1 Persistent Chat –∑–∞–ø—É—â–µ–Ω!")
        print("üìÅ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: #file:–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É")
        print("üí¨ –ö–æ–º–∞–Ω–¥—ã:")
        print("  /preload - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å")
        print("  /unload - –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏")
        print("  /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("  /exit - –≤—ã—Ö–æ–¥")
        print("  /help - –ø–æ–º–æ—â—å")
        print("-" * 50)
        print("‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /preload")

        while True:
            try:
                user_input = input("\nüë§ –í—ã: ").strip()

                if not user_input:
                    continue

                if user_input.lower() == "/exit":
                    if self.model_loaded:
                        print("üîÑ –í—ã–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                        self.unload_model()
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif user_input.lower() == "/preload":
                    if self.model_loaded:
                        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å")
                    else:
                        self.preload_model()
                    continue
                elif user_input.lower() == "/unload":
                    if self.model_loaded:
                        self.unload_model()
                    else:
                        print("‚ùå –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–≥—Ä—É–∂–µ–Ω–∞")
                    continue
                elif user_input.lower() == "/clear":
                    self.clear_history()
                    continue
                elif user_input.lower() == "/history":
                    self.show_history()
                    continue
                elif user_input.lower() == "/status":
                    self.show_status()
                    continue
                elif user_input.lower() == "/help":
                    print("\nüìñ –ü–æ–º–æ—â—å:")
                    print("  /preload - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π)")
                    print("  /unload - –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏ (–æ—Å–≤–æ–±–æ–¥–∏—Ç—å RAM)")
                    print("  #file:data.csv - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä")
                    print("  /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
                    print("  /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
                    print("  /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                    print("  /exit - –≤—ã—Ö–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–∏")
                    continue

                if not self.model_loaded:
                    print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /preload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                    continue

                print("ü§ñ DeepSeek –¥—É–º–∞–µ—Ç...")
                response = self.send_message(user_input)
                print(f"\nü§ñ AI: {response}")

            except KeyboardInterrupt:
                print("\n\nüîÑ –í—ã–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                if self.model_loaded:
                    self.unload_model()
                print("üëã –ß–∞—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    model_name = "deepseek-r1:8b"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –º–æ–¥–µ–ª—å

    chat = DeepSeekChatPersistent(model_name)
    chat.run()


if __name__ == "__main__":
    main()
