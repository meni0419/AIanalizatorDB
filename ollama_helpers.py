import ollama
from ollama import Client
from db_connect import get_db_connection
import re
import json
import time
import os
from typing import List, Dict, Any, Tuple
from datetime import datetime, timedelta
import calendar

client = Client(host='http://localhost:11434')


class SmartDatabaseAgent:
    def __init__(self):
        self.schema = self.load_schema()
        self.query_patterns = self.setup_query_patterns()
        self.debug_mode = True  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        self.period_types = {
            'day': 1,
            'week': 2,
            'decade': 3,
            'month': 4,
            'quarter': 5,
            'year': 6
        }

    def load_schema(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É –ë–î –∏–∑ —Ñ–∞–π–ª–∞"""
        schema_file = 'db_schema.json'
        if not os.path.exists(schema_file):
            raise FileNotFoundError(f"–§–∞–π–ª —Å—Ö–µ–º—ã –ë–î '{schema_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        with open(schema_file, 'r', encoding='utf-8') as f:
            return json.load(f)

    def setup_query_patterns(self) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        return {
            'top_performers': {
                'keywords': ['—Ç–æ–ø', '–ª—É—á—à–∏–µ', '—Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ', '–ª–∏–¥–µ—Ä—ã'],
                'template': 'top_employees'
            },
            'employee_dynamics': {
                'keywords': ['–¥–∏–Ω–∞–º–∏–∫–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–ø–æ –º–µ—Å—è—Ü–∞–º', '–ø–æ–º–µ—Å—è—á–Ω–æ', '—Ñ–∞–∫—Ç—ã –ø–æ–º–µ—Å—è—á–Ω–æ'],
                'template': 'employee_dynamics'
            },
            'plan_analysis': {
                'keywords': ['–ø–ª–∞–Ω', '–ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è', '–Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω—è', '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞', '—á–∞—â–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è–ª'],
                'template': 'plan_analysis'
            },
            'worst_performers': {
                'keywords': ['—Ö—É–¥—à–∏–µ', '–ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–Ω–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'],
                'template': 'worst_performers'
            },
            'period_comparison': {
                'keywords': ['—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Å—Ä–∞–≤–Ω–∏—Ç—å', '–∑–∞ –ø–µ—Ä–∏–æ–¥', '–º–µ–∂–¥—É'],
                'template': 'period_comparison'
            }
        }

    def analyze_query_intent(self, prompt: str) -> Tuple[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        prompt_lower = prompt.lower()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            'employee_names': self.extract_employee_names(prompt),
            'indicator_id': self.extract_indicator_id(prompt),
            'date_range': self.extract_date_range(prompt),
            'limit': self.extract_limit(prompt),
            'order_by': self.extract_order_preference(prompt),
            'period_type': self.extract_period_type(prompt)
        }

        if self.debug_mode:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {prompt}")
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        for pattern_name, pattern_info in self.query_patterns.items():
            if any(keyword in prompt_lower for keyword in pattern_info['keywords']):
                if self.debug_mode:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_name} -> {pattern_info['template']}")
                return pattern_info['template'], params

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if self.debug_mode:
            print("üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: top_employees")
        return 'top_employees', params

    def extract_period_type(self, prompt: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        prompt_lower = prompt.lower()

        if any(word in prompt_lower for word in ['–ø–æ–º–µ—Å—è—á–Ω–æ', '–ø–æ –º–µ—Å—è—Ü–∞–º', '–º–µ—Å—è—Ü']):
            return self.period_types['month']  # 4
        elif any(word in prompt_lower for word in ['–ø–æ –¥–Ω—è–º', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '–¥–µ–Ω—å']):
            return self.period_types['day']  # 1
        elif any(word in prompt_lower for word in ['–ø–æ –Ω–µ–¥–µ–ª—è–º', '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–Ω–µ–¥–µ–ª—è']):
            return self.period_types['week']  # 2
        elif any(word in prompt_lower for word in ['–ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º', '–∫–≤–∞—Ä—Ç–∞–ª']):
            return self.period_types['quarter']  # 5
        elif any(word in prompt_lower for word in ['–ø–æ –≥–æ–¥–∞–º', '–≥–æ–¥']):
            return self.period_types['year']  # 6
        else:
            return self.period_types['month']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü

    def extract_employee_names(self, prompt: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        names = []
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω", "–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞"
        name_patterns = [
            r'([–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+){0,2})',
            r'([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)',
        ]

        for pattern in name_patterns:
            matches = re.findall(pattern, prompt)
            names.extend(matches)

        return list(set(names))

    def extract_indicator_id(self, prompt: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        match = re.search(r'–ø–æ–∫–∞–∑–∞—Ç–µ–ª[—é—å–∏]\s*(\d+)', prompt.lower())
        return int(match.group(1)) if match else 1

    def extract_date_range(self, prompt: str) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        prompt_lower = prompt.lower()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
        year_match = re.search(r'(\d{4})', prompt)
        year = int(year_match.group(1)) if year_match else 2022

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü—ã
        months = {
            '—è–Ω–≤–∞—Ä': 1, '—Ñ–µ–≤—Ä–∞–ª': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª': 4, '–º–∞–π': 5, '–º–∞—è': 5,
            '–∏—é–Ω': 6, '–∏—é–ª': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä': 9, '–æ–∫—Ç—è–±—Ä': 10, '–Ω–æ—è–±—Ä': 11, '–¥–µ–∫–∞–±—Ä': 12
        }

        found_months = []
        for month_name, month_num in months.items():
            if month_name in prompt_lower:
                found_months.append(month_num)

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –º–µ—Å—è—Ü
        if len(found_months) == 1:
            month = found_months[0]
            return {
                'start': f"{year}-{month:02d}-01",
                'end': f"{year}-{month:02d}-{calendar.monthrange(year, month)[1]}",
                'type': 'month'
            }

        # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω "—Å —è–Ω–≤–∞—Ä—è –ø–æ –¥–µ–∫–∞–±—Ä—å"
        if '–ø–æ' in prompt_lower and len(found_months) == 2:
            start_month, end_month = min(found_months), max(found_months)
            return {
                'start': f"{year}-{start_month:02d}-01",
                'end': f"{year}-{end_month:02d}-{calendar.monthrange(year, end_month)[1]}",
                'type': 'range'
            }

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–µ—Å—å –≥–æ–¥
        return {
            'start': f"{year}-01-01",
            'end': f"{year}-12-31",
            'type': 'year'
        }

    def extract_limit(self, prompt: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π"""
        match = re.search(r'(\d+)', prompt)
        return int(match.group(1)) if match else 10

    def extract_order_preference(self, prompt: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        prompt_lower = prompt.lower()
        if any(word in prompt_lower for word in ['—Ö—É–¥—à–∏–µ', '–ø–ª–æ—Ö–∏–µ', '–Ω–∏–∑–∫–∏–µ']):
            return 'ASC'
        return 'DESC'

    def generate_sql_by_template(self, template: str, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

        if template == 'top_employees':
            return self.build_top_employees_query(params)
        elif template == 'employee_dynamics':
            return self.build_employee_dynamics_query(params)
        elif template == 'plan_analysis':
            return self.build_plan_analysis_query(params)
        elif template == 'worst_performers':
            return self.build_worst_performers_query(params)
        elif template == 'period_comparison':
            return self.build_period_comparison_query(params)
        else:
            return self.build_top_employees_query(params)

    def build_top_employees_query(self, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        date_range = params['date_range']
        indicator_id = params['indicator_id']
        limit = params['limit']
        order = params['order_by']

        sql = f"""
        SELECT 
            u.last_name,
            u.first_name,
            cpv.fact,
            cpv.plan,
            cpv.result,
            cpv.period_start,
            cpv.period_end
        FROM user u
        JOIN user_to_mo utm ON u.user_id = utm.user_id
        JOIN indicator_to_mo itm ON utm.mo_id = itm.mo_id
        JOIN closed_period_values cpv ON itm.indicator_to_mo_id = cpv.indicator_to_mo_id
        WHERE itm.indicator_id = {indicator_id}
          AND cpv.period_start >= '{date_range['start']}'
          AND cpv.period_end <= '{date_range['end']}'
          AND cpv.fact IS NOT NULL
        ORDER BY cpv.fact {order}
        LIMIT {limit};
        """
        return sql.strip()

    def build_employee_dynamics_query(self, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        date_range = params['date_range']
        indicator_id = params['indicator_id']
        names = params['employee_names']
        period_type = params.get('period_type', self.period_types['month'])

        name_condition = ""
        if names:
            name_parts = []
            for name in names:
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                if ' ' in name:
                    parts = name.split()
                    # –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
                    name_parts.append(f"(u.last_name = '{parts[0]}' AND u.first_name = '{parts[1]}')")
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
                    name_parts.append(f"(u.last_name LIKE '%{name}%' OR u.first_name LIKE '%{name}%')")
            name_condition = f"AND ({' OR '.join(name_parts)})"

        sql = f"""
        SELECT 
            u.last_name,
            u.first_name,
            cpv.period_start,
            cpv.period_end,
            cpv.fact,
            cpv.plan,
            cpv.result,
            MONTH(cpv.period_start) as month,
            YEAR(cpv.period_start) as year
        FROM user u
        JOIN user_to_mo utm ON u.user_id = utm.user_id
        JOIN indicator_to_mo itm ON utm.mo_id = itm.mo_id
        JOIN closed_period_values cpv ON itm.indicator_to_mo_id = cpv.indicator_to_mo_id
        WHERE itm.indicator_id = {indicator_id}
          AND cpv.period_start >= '{date_range['start']}'
          AND cpv.period_end <= '{date_range['end']}'
          AND cpv.period_type = {period_type}
          AND cpv.fact IS NOT NULL
          {name_condition}
        ORDER BY u.last_name, u.first_name, cpv.period_start;
        """
        return sql.strip()

    def build_plan_analysis_query(self, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤"""
        date_range = params['date_range']
        indicator_id = params['indicator_id']

        sql = f"""
        SELECT 
            u.last_name,
            u.first_name,
            COUNT(*) as total_periods,
            COUNT(CASE WHEN cpv.result > 100 THEN 1 END) as overachieved_periods,
            COUNT(CASE WHEN cpv.result < 100 THEN 1 END) as underachieved_periods,
            AVG(cpv.result) as avg_result,
            AVG(cpv.fact) as avg_fact,
            AVG(cpv.plan) as avg_plan,
            ROUND(COUNT(CASE WHEN cpv.result > 100 THEN 1 END) * 100.0 / COUNT(*), 2) as overachievement_rate
        FROM user u
        JOIN user_to_mo utm ON u.user_id = utm.user_id
        JOIN indicator_to_mo itm ON utm.mo_id = itm.mo_id
        JOIN closed_period_values cpv ON itm.indicator_to_mo_id = cpv.indicator_to_mo_id
        WHERE itm.indicator_id = {indicator_id}
          AND cpv.period_start >= '{date_range['start']}'
          AND cpv.period_end <= '{date_range['end']}'
          AND cpv.fact IS NOT NULL
          AND cpv.plan IS NOT NULL
          AND cpv.result IS NOT NULL
        GROUP BY u.user_id, u.last_name, u.first_name
        HAVING COUNT(*) > 0
        ORDER BY overachievement_rate DESC, avg_result DESC
        LIMIT {params['limit']};
        """
        return sql.strip()

    def build_worst_performers_query(self, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ö—É–¥—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        params['order_by'] = 'ASC'
        return self.build_top_employees_query(params)

    def build_period_comparison_query(self, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤"""
        return self.build_employee_dynamics_query(params)

    def get_best_plan_performer_dynamics(self, params: Dict) -> str:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–≥–æ –ø–æ –ø–ª–∞–Ω–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –¥–∏–Ω–∞–º–∏–∫—É"""
        date_range = params['date_range']
        indicator_id = params['indicator_id']

        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–ª–∞–Ω–æ–≤
        best_performer_sql = f"""
        SELECT 
            u.last_name,
            u.first_name,
            COUNT(CASE WHEN cpv.result > 100 THEN 1 END) as overachieved_periods,
            ROUND(COUNT(CASE WHEN cpv.result > 100 THEN 1 END) * 100.0 / COUNT(*), 2) as overachievement_rate
        FROM user u
        JOIN user_to_mo utm ON u.user_id = utm.user_id
        JOIN indicator_to_mo itm ON utm.mo_id = itm.mo_id
        JOIN closed_period_values cpv ON itm.indicator_to_mo_id = cpv.indicator_to_mo_id
        WHERE itm.indicator_id = {indicator_id}
          AND cpv.period_start >= '{date_range['start']}'
          AND cpv.period_end <= '{date_range['end']}'
          AND cpv.fact IS NOT NULL
          AND cpv.plan IS NOT NULL
          AND cpv.result IS NOT NULL
        GROUP BY u.user_id, u.last_name, u.first_name
        HAVING COUNT(*) > 0
        ORDER BY overachievement_rate DESC, overachieved_periods DESC
        LIMIT 1;
        """
        return best_performer_sql

    def build_exact_employee_dynamics_query(self, last_name: str, first_name: str, params: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏"""
        date_range = params['date_range']
        indicator_id = params['indicator_id']
        period_type = params.get('period_type', self.period_types['month'])

        sql = f"""
        SELECT 
            u.last_name,
            u.first_name,
            cpv.period_start,
            cpv.period_end,
            cpv.fact,
            cpv.plan,
            cpv.result,
            MONTH(cpv.period_start) as month,
            YEAR(cpv.period_start) as year
        FROM user u
        JOIN user_to_mo utm ON u.user_id = utm.user_id
        JOIN indicator_to_mo itm ON utm.mo_id = itm.mo_id
        JOIN closed_period_values cpv ON itm.indicator_to_mo_id = cpv.indicator_to_mo_id
        WHERE itm.indicator_id = {indicator_id}
          AND cpv.period_start >= '{date_range['start']}'
          AND cpv.period_end <= '{date_range['end']}'
          AND cpv.period_type = {period_type}
          AND cpv.fact IS NOT NULL
          AND u.last_name = '{last_name}'
          AND u.first_name = '{first_name}'
        ORDER BY cpv.period_start;
        """
        return sql.strip()

    def format_results_smart(self, results: List[Dict], template: str, params: Dict) -> str:
        """–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        if not results:
            return "üì≠ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        if template == 'employee_dynamics':
            return self.format_dynamics_results(results)
        elif template == 'plan_analysis':
            return self.format_plan_analysis_results(results)
        elif template in ['top_employees', 'worst_performers']:
            return self.format_top_employees_results(results, template == 'worst_performers')
        else:
            return self.format_generic_results(results)

    def format_dynamics_results(self, results: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–Ω–∞–º–∏–∫–∏"""
        if not results:
            return "üì≠ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        employees = {}
        for row in results:
            if isinstance(row, (tuple, list)):
                key = f"{row[0]} {row[1]}"
                if key not in employees:
                    employees[key] = []
                employees[key].append(row)

        response = ["üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:\n"]

        for emp_name, emp_data in employees.items():
            response.append(f"üë§ {emp_name}:")
            sorted_data = sorted(emp_data, key=lambda x: x[2])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

            for row in sorted_data:
                if len(row) >= 9:
                    month = row[7]  # month
                    year = row[8]  # year
                    fact = row[4] if row[4] is not None else 'N/A'
                    plan = row[5] if row[5] is not None else 'N/A'
                    result = row[6] if row[6] is not None else 'N/A'

                    month_names = ['', '–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                                   '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    indicator = "üìà" if (isinstance(result, (int, float)) and result > 100) else "üìä"

                    response.append(
                        f"   {indicator} {month_names[month]} {year}: –§–∞–∫—Ç={fact}, –ü–ª–∞–Ω={plan}, –†–µ–∑—É–ª—å—Ç–∞—Ç={result}%")
            response.append("")

        return "\n".join(response)

    def format_plan_analysis_results(self, results: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤"""
        response = ["üìä –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤:\n"]

        for idx, row in enumerate(results, 1):
            if isinstance(row, (tuple, list)) and len(row) >= 9:
                name = f"{row[0]} {row[1]}"
                total = row[2]
                overachieved = row[3]
                underachieved = row[4]
                avg_result = row[5]
                overachievement_rate = row[8]

                response.append(f"{idx:2d}. {name:<25}")
                response.append(f"    üìà –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {overachieved}/{total} ({overachievement_rate}%)")
                response.append(f"    üìâ –ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {underachieved}/{total}")
                response.append(f"    üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_result:.2f}%")
                response.append("")

        return "\n".join(response)

    def format_top_employees_results(self, results: List[Dict], is_worst: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        title = "üìâ –•—É–¥—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:" if is_worst else "üìä –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"
        response = [title]

        for idx, row in enumerate(results, 1):
            if isinstance(row, (tuple, list)) and len(row) >= 5:
                name = f"{row[0]} {row[1]}"
                fact = row[2] if row[2] is not None else 'N/A'
                plan = row[3] if row[3] is not None else 'N/A'
                result = row[4] if row[4] is not None else 'N/A'

                response.append(f"{idx:2d}. {name:<25} | –§–∞–∫—Ç: {fact:>8} | –ü–ª–∞–Ω: {plan:>8} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {result:>8}%")

        return "\n".join(response)

    def format_generic_results(self, results: List[Dict]) -> str:
        """–û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        response = ["üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:"]
        for idx, row in enumerate(results, 1):
            response.append(f"{idx}. {row}")
        return "\n".join(response)

    def handle_best_performer_with_dynamics(self, prompt: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å: –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –ø–æ –ø–ª–∞–Ω–∞–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –¥–∏–Ω–∞–º–∏–∫—É"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            _, params = self.analyze_query_intent(prompt)

            # –≠—Ç–∞–ø 1: –ù–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–ª–∞–Ω–æ–≤
            best_performer_sql = self.get_best_plan_performer_dynamics(params)

            if self.debug_mode:
                print(f"üîç SQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
                print(best_performer_sql)

            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(best_performer_sql)
                best_performer = cursor.fetchall()

            if not best_performer:
                return "üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤"

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            best_last_name = best_performer[0][0]
            best_first_name = best_performer[0][1]
            best_name = f"{best_last_name} {best_first_name}"

            # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ç–æ—á–Ω–æ –ø–æ –∏–º–µ–Ω–∏
            dynamics_sql = self.build_exact_employee_dynamics_query(best_last_name, best_first_name, params)

            if self.debug_mode:
                print(f"üîç SQL –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ {best_name}:")
                print(dynamics_sql)

            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(dynamics_sql)
                dynamics_results = cursor.fetchall()

            if self.debug_mode:
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–∏–Ω–∞–º–∏–∫–∏: {len(dynamics_results)}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = [f"üèÜ –õ—É—á—à–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–ª–∞–Ω–æ–≤: {best_name}"]
            response.append(f"üìà –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {best_performer[0][2]} ({best_performer[0][3]}%)")
            response.append("")

            if dynamics_results:
                dynamics_formatted = self.format_dynamics_results(dynamics_results)
                response.append(dynamics_formatted)
            else:
                response.append("üì≠ –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–º–µ—Å—è—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                response.append("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞")

            return "\n".join(response)

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    def process_query(self, prompt: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–ª–æ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if '—á–∞—â–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è–ª' in prompt.lower() and (
                    '—Ñ–∞–∫—Ç—ã –ø–æ–º–µ—Å—è—á–Ω–æ' in prompt.lower() or '–ø–æ–º–µ—Å—è—á–Ω–æ' in prompt.lower()):
                return self.handle_best_performer_with_dynamics(prompt)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            template, params = self.analyze_query_intent(prompt)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
            sql = self.generate_sql_by_template(template, params)

            if self.debug_mode:
            # print(f"üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:")
            # print(sql)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(sql)
                results = cursor.fetchall()

            if self.debug_mode:
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                if results:
                    print(f"üîç –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results[0]}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return self.format_results_smart(results, template, params)

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def main():
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ SQL-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞... ")
    try:
        agent = SmartDatabaseAgent()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("   ‚Ä¢ –ü–æ–∫–∞–∂–∏ 10 —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é 1 –∑–∞ –¥–µ–∫–∞–±—Ä—å 2022")
        print("   ‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –®–ø–∞–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é 1 —Å —è–Ω–≤–∞—Ä—è –ø–æ –¥–µ–∫–∞–±—Ä—å 2022")
        print("   ‚Ä¢ –ö—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é 1 –∑–∞ 2022 –≥–æ–¥")
        print("   ‚Ä¢ –•—É–¥—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é 1 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª 2022")
        print("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")

        while True:
            try:
                prompt = input("\n> ").strip()
                if prompt.lower() == 'exit':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                start_time = time.time()
                response = agent.process_query(prompt)
                elapsed = time.time() - start_time

                print(f"\n‚è±Ô∏è  –û—Ç–≤–µ—Ç ({elapsed:.2f} —Å–µ–∫):")
                print(response)

            except KeyboardInterrupt:
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")


if __name__ == "__main__":
    main()